user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";  # Disable gzip for old versions of Internet Explorer
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # Serve the application
    server {
        listen 80;
        server_name localhost;
        # Set the root directory
        root /usr/share/nginx/html;
        index index.html index.html.gz;

        # Serve the application (including client-side routing)
        location / {
            try_files $uri $uri/ /index.html.gz =404;

            # Ensure proper headers for gzipped index.html
            gzip off;  # Disable gzip for pre-compressed .gz files
            add_header Content-Encoding gzip;
            add_header Content-Type text/html;
            add_header Vary Accept-Encoding;
        }

        # Serve JavaScript files with gzip if available
        location ~* \.js$ {
            add_header Content-Type application/javascript;
            try_files $uri.gz $uri =404;
            add_header Content-Encoding gzip always;
            add_header Vary Accept-Encoding;
        }

        # Serve CSS files with gzip if available
        location ~* \.css$ {
            add_header Content-Type text/css;
            try_files $uri.gz $uri =404;
            add_header Content-Encoding gzip always;
            add_header Vary Accept-Encoding;
        }

        # Serve HTML files with gzip if available
        location ~* \.html$ {
            add_header Content-Type text/html;
            try_files $uri.gz $uri =404;
            add_header Content-Encoding gzip always;
            add_header Vary Accept-Encoding;
        }

        # Serve SVG files with gzip if available
        location ~* \.svg$ {
            add_header Content-Type image/svg+xml;
            try_files $uri.gz $uri =404;
            add_header Content-Encoding gzip always;
            add_header Vary Accept-Encoding;
        }

        # Serve static assets (images, fonts, etc.) with gzip if available
        location ~* \.(eot|ttf|woff|woff2|png|jpeg|jpg|gif|webp)$ {
            try_files $uri.gz $uri =404;
            add_header Content-Encoding gzip always;
        }

        # Handle already gzipped files
        location ~* \.gz$ {
            gzip off;  # Ensure Nginx doesn't recompress .gz files
            add_header Content-Encoding gzip;
            add_header Vary Accept-Encoding;
            default_type application/octet-stream;
            try_files $uri =404;
        }

        # CORS configuration for API and assets compatibility across platforms
        location /api/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Cache and expiration settings for static assets
        location ~* \.(js|css|html|svg|gz|eot|ttf|woff|woff2|png|jpeg|jpg|gif|webp)$ {
            expires 1h;
            add_header Cache-Control "public, no-transform";
            add_header Vary Accept-Encoding;
        }
    }
}
